generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  username      String    @unique
  email         String    @unique
  passwordHash  String
  firstName     String?
  lastName      String?
  bio           String?   @db.VarChar(160)
  avatarUrl     String?
  coverImageUrl String?
  location      String?
  website       String?
  birthDate     DateTime?
  isVerified    Boolean   @default(false)
  isActive      Boolean   @default(true)
  role          String    @default("user")
  
  followersCount Int @default(0)
  followingCount Int @default(0)
  postsCount     Int @default(0)
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lastLoginAt DateTime?
  
  // Relations
  posts                 Post[]
  comments              Comment[]
  likes                 Like[]
  notifications         Notification[] @relation("UserNotifications")
  sentNotifications     Notification[] @relation("ActorNotifications")
  
  followers Follow[] @relation("Following")
  following Follow[] @relation("Follower")
  
  @@map("users")
}

model Post {
  id            String    @id @default(uuid())
  userId        String
  content       String    @db.VarChar(500)
  imageUrl      String?
  likesCount    Int       @default(0)
  commentsCount Int       @default(0)
  sharesCount   Int       @default(0)
  isEdited      Boolean   @default(false)
  isDeleted     Boolean   @default(false)
  
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  
  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments Comment[]
  likes    Like[]
  
  @@index([userId])
  @@index([createdAt])
  @@map("posts")
}

model Comment {
  id         String    @id @default(uuid())
  postId     String
  userId     String
  content    String    @db.VarChar(300)
  likesCount Int       @default(0)
  isDeleted  Boolean   @default(false)
  
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  
  // Relations
  post  Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes Like[]
  
  @@index([postId])
  @@index([userId])
  @@map("comments")
}

model Like {
  id         String   @id @default(uuid())
  userId     String
  postId     String?
  commentId  String?
  
  createdAt DateTime @default(now())
  
  // Relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post    Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  
  @@unique([userId, postId])
  @@unique([userId, commentId])
  @@index([postId])
  @@index([commentId])
  @@map("likes")
}

model Follow {
  id          String   @id @default(uuid())
  followerId  String
  followingId String
  
  createdAt DateTime @default(now())
  
  // Relations
  follower  User @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)
  
  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
  @@map("follows")
}

model Notification {
  id       String  @id @default(uuid())
  userId   String
  actorId  String
  type     String  // 'follow' | 'like' | 'comment'
  targetId String?
  message  String
  isRead   Boolean @default(false)
  
  createdAt DateTime @default(now())
  
  // Relations
  user  User @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
  actor User @relation("ActorNotifications", fields: [actorId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([createdAt])
  @@map("notifications")
}

